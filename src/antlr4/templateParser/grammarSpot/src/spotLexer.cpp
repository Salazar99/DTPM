
// Generated from spot.g4 by ANTLR 4.12.0


#include "spotLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct SpotLexerStaticData final {
  SpotLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  SpotLexerStaticData(const SpotLexerStaticData&) = delete;
  SpotLexerStaticData(SpotLexerStaticData&&) = delete;
  SpotLexerStaticData& operator=(const SpotLexerStaticData&) = delete;
  SpotLexerStaticData& operator=(SpotLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag spotlexerLexerOnceFlag;
SpotLexerStaticData *spotlexerLexerStaticData = nullptr;

void spotlexerLexerInitialize() {
  assert(spotlexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<SpotLexerStaticData>(
    std::vector<std::string>{
      "PLACEHOLDER", "DT_AND", "DT_NEXT", "DT_NEXT_AND", "DT_NCREPS", "SEP", 
      "FUNCTION", "EVENTUALLY", "ALWAYS", "NEXT", "UNTIL", "RELEASE", "DOTS", 
      "IMPL", "IMPLO", "IFF", "XOR", "SEREIMPL", "SEREIMPLO", "ASS", "DELAY", 
      "SCOL", "COL", "BOOLEAN_CONSTANT", "BOOLEAN_VARIABLE", "LOGIC_VARIABLE", 
      "CONST_SUFFIX", "NUMERIC_CONSTANT", "NUMERIC_VARIABLE", "LCURLY", 
      "RCURLY", "LSQUARED", "RSQUARED", "LROUND", "RROUND", "VARIABLE", 
      "VALID_ID_START", "VALID_ID_CHAR", "SINTEGER", "UINTEGER", "FLOAT", 
      "VERILOG_BINARY", "GCC_BINARY", "HEX", "START_VAR", "END_VAR", "PLUS", 
      "MINUS", "TIMES", "DIV", "GT", "GE", "LT", "LE", "EQ", "NEQ", "BAND", 
      "BOR", "BXOR", "NEG", "LSHIFT", "RSHIFT", "AND", "OR", "NOT", "WS"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "", "'..&&..'", "", "", "", "", "'$stable'", "'F'", "'G'", "'X'", 
      "'U'", "'R'", "'..'", "'->'", "'=>'", "'<->'", "'xor'", "", "", "'='", 
      "'##'", "';'", "':'", "", "", "", "", "", "", "'{'", "'}'", "'['", 
      "']'", "'('", "')'", "", "", "", "", "", "", "'+'", "'-'", "'*'", 
      "'/'", "'>'", "'>='", "'<'", "'<='", "'=='", "'!='", "'&'", "'|'", 
      "'^'", "'~'", "'<<'", "'>>'", "'&&'", "'||'", "'!'"
    },
    std::vector<std::string>{
      "", "PLACEHOLDER", "DT_AND", "DT_NEXT", "DT_NEXT_AND", "DT_NCREPS", 
      "SEP", "FUNCTION", "EVENTUALLY", "ALWAYS", "NEXT", "UNTIL", "RELEASE", 
      "DOTS", "IMPL", "IMPLO", "IFF", "XOR", "SEREIMPL", "SEREIMPLO", "ASS", 
      "DELAY", "SCOL", "COL", "BOOLEAN_CONSTANT", "BOOLEAN_VARIABLE", "LOGIC_VARIABLE", 
      "CONST_SUFFIX", "NUMERIC_CONSTANT", "NUMERIC_VARIABLE", "LCURLY", 
      "RCURLY", "LSQUARED", "RSQUARED", "LROUND", "RROUND", "SINTEGER", 
      "UINTEGER", "FLOAT", "VERILOG_BINARY", "GCC_BINARY", "HEX", "PLUS", 
      "MINUS", "TIMES", "DIV", "GT", "GE", "LT", "LE", "EQ", "NEQ", "BAND", 
      "BOR", "BXOR", "NEG", "LSHIFT", "RSHIFT", "AND", "OR", "NOT", "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,61,446,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,
  	1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
  	4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,3,5,178,
  	8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,
  	1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,
  	1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,222,
  	8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,231,8,18,1,19,1,19,1,20,
  	1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
  	1,23,1,23,1,23,3,23,253,8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
  	1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,
  	1,26,1,26,1,26,1,26,3,26,281,8,26,1,27,1,27,1,28,1,28,1,28,1,28,1,28,
  	1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,
  	1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,5,35,312,8,35,10,35,12,35,315,
  	9,35,1,36,3,36,318,8,36,1,37,3,37,321,8,37,1,38,1,38,4,38,325,8,38,11,
  	38,12,38,326,1,39,4,39,330,8,39,11,39,12,39,331,1,40,3,40,335,8,40,1,
  	40,4,40,338,8,40,11,40,12,40,339,1,40,1,40,4,40,344,8,40,11,40,12,40,
  	345,1,40,3,40,349,8,40,1,40,4,40,352,8,40,11,40,12,40,353,1,40,1,40,3,
  	40,358,8,40,1,41,1,41,1,41,4,41,363,8,41,11,41,12,41,364,1,42,1,42,1,
  	42,1,42,4,42,371,8,42,11,42,12,42,372,1,43,1,43,1,43,1,43,4,43,379,8,
  	43,11,43,12,43,380,1,43,1,43,1,43,1,43,4,43,387,8,43,11,43,12,43,388,
  	3,43,391,8,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,
  	1,49,1,50,1,50,1,51,1,51,1,51,1,52,1,52,1,53,1,53,1,53,1,54,1,54,1,54,
  	1,55,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,1,60,
  	1,61,1,61,1,61,1,62,1,62,1,62,1,63,1,63,1,63,1,64,1,64,1,65,1,65,1,65,
  	1,65,0,0,66,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
  	25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
  	24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,
  	71,0,73,0,75,0,77,36,79,37,81,38,83,39,85,40,87,41,89,0,91,0,93,42,95,
  	43,97,44,99,45,101,46,103,47,105,48,107,49,109,50,111,51,113,52,115,53,
  	117,54,119,55,121,56,123,57,125,58,127,59,129,60,131,61,1,0,5,3,0,65,
  	90,95,95,97,122,8,0,40,41,46,46,48,58,65,91,93,93,95,95,97,123,125,125,
  	2,0,48,57,97,102,2,0,48,57,65,70,3,0,9,10,13,13,32,32,459,0,1,1,0,0,0,
  	0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
  	0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
  	0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
  	1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
  	0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,
  	0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
  	1,0,0,0,0,69,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,
  	0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,
  	0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,
  	0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,
  	0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,
  	0,129,1,0,0,0,0,131,1,0,0,0,1,133,1,0,0,0,3,136,1,0,0,0,5,143,1,0,0,0,
  	7,152,1,0,0,0,9,161,1,0,0,0,11,177,1,0,0,0,13,179,1,0,0,0,15,187,1,0,
  	0,0,17,189,1,0,0,0,19,191,1,0,0,0,21,193,1,0,0,0,23,195,1,0,0,0,25,197,
  	1,0,0,0,27,200,1,0,0,0,29,203,1,0,0,0,31,206,1,0,0,0,33,210,1,0,0,0,35,
  	221,1,0,0,0,37,230,1,0,0,0,39,232,1,0,0,0,41,234,1,0,0,0,43,237,1,0,0,
  	0,45,239,1,0,0,0,47,252,1,0,0,0,49,254,1,0,0,0,51,264,1,0,0,0,53,280,
  	1,0,0,0,55,282,1,0,0,0,57,284,1,0,0,0,59,297,1,0,0,0,61,299,1,0,0,0,63,
  	301,1,0,0,0,65,303,1,0,0,0,67,305,1,0,0,0,69,307,1,0,0,0,71,309,1,0,0,
  	0,73,317,1,0,0,0,75,320,1,0,0,0,77,322,1,0,0,0,79,329,1,0,0,0,81,357,
  	1,0,0,0,83,359,1,0,0,0,85,366,1,0,0,0,87,390,1,0,0,0,89,392,1,0,0,0,91,
  	394,1,0,0,0,93,396,1,0,0,0,95,398,1,0,0,0,97,400,1,0,0,0,99,402,1,0,0,
  	0,101,404,1,0,0,0,103,406,1,0,0,0,105,409,1,0,0,0,107,411,1,0,0,0,109,
  	414,1,0,0,0,111,417,1,0,0,0,113,420,1,0,0,0,115,422,1,0,0,0,117,424,1,
  	0,0,0,119,426,1,0,0,0,121,428,1,0,0,0,123,431,1,0,0,0,125,434,1,0,0,0,
  	127,437,1,0,0,0,129,440,1,0,0,0,131,442,1,0,0,0,133,134,5,80,0,0,134,
  	135,3,79,39,0,135,2,1,0,0,0,136,137,5,46,0,0,137,138,5,46,0,0,138,139,
  	5,38,0,0,139,140,5,38,0,0,140,141,5,46,0,0,141,142,5,46,0,0,142,4,1,0,
  	0,0,143,144,5,46,0,0,144,145,5,46,0,0,145,146,5,35,0,0,146,147,5,35,0,
  	0,147,148,1,0,0,0,148,149,3,79,39,0,149,150,5,46,0,0,150,151,5,46,0,0,
  	151,6,1,0,0,0,152,153,5,46,0,0,153,154,5,46,0,0,154,155,5,35,0,0,155,
  	156,1,0,0,0,156,157,3,79,39,0,157,158,5,38,0,0,158,159,5,46,0,0,159,160,
  	5,46,0,0,160,8,1,0,0,0,161,162,5,46,0,0,162,163,5,46,0,0,163,164,5,91,
  	0,0,164,165,5,45,0,0,165,166,5,62,0,0,166,167,1,0,0,0,167,168,3,79,39,
  	0,168,169,5,93,0,0,169,170,3,11,5,0,170,171,5,46,0,0,171,172,5,46,0,0,
  	172,10,1,0,0,0,173,174,5,64,0,0,174,178,5,58,0,0,175,176,5,64,0,0,176,
  	178,5,59,0,0,177,173,1,0,0,0,177,175,1,0,0,0,178,12,1,0,0,0,179,180,5,
  	36,0,0,180,181,5,115,0,0,181,182,5,116,0,0,182,183,5,97,0,0,183,184,5,
  	98,0,0,184,185,5,108,0,0,185,186,5,101,0,0,186,14,1,0,0,0,187,188,5,70,
  	0,0,188,16,1,0,0,0,189,190,5,71,0,0,190,18,1,0,0,0,191,192,5,88,0,0,192,
  	20,1,0,0,0,193,194,5,85,0,0,194,22,1,0,0,0,195,196,5,82,0,0,196,24,1,
  	0,0,0,197,198,5,46,0,0,198,199,5,46,0,0,199,26,1,0,0,0,200,201,5,45,0,
  	0,201,202,5,62,0,0,202,28,1,0,0,0,203,204,5,61,0,0,204,205,5,62,0,0,205,
  	30,1,0,0,0,206,207,5,60,0,0,207,208,5,45,0,0,208,209,5,62,0,0,209,32,
  	1,0,0,0,210,211,5,120,0,0,211,212,5,111,0,0,212,213,5,114,0,0,213,34,
  	1,0,0,0,214,215,5,124,0,0,215,216,5,45,0,0,216,222,5,62,0,0,217,218,5,
  	91,0,0,218,219,5,93,0,0,219,220,5,45,0,0,220,222,5,62,0,0,221,214,1,0,
  	0,0,221,217,1,0,0,0,222,36,1,0,0,0,223,224,5,124,0,0,224,225,5,61,0,0,
  	225,231,5,62,0,0,226,227,5,91,0,0,227,228,5,93,0,0,228,229,5,61,0,0,229,
  	231,5,62,0,0,230,223,1,0,0,0,230,226,1,0,0,0,231,38,1,0,0,0,232,233,5,
  	61,0,0,233,40,1,0,0,0,234,235,5,35,0,0,235,236,5,35,0,0,236,42,1,0,0,
  	0,237,238,5,59,0,0,238,44,1,0,0,0,239,240,5,58,0,0,240,46,1,0,0,0,241,
  	242,5,64,0,0,242,243,5,116,0,0,243,244,5,114,0,0,244,245,5,117,0,0,245,
  	253,5,101,0,0,246,247,5,64,0,0,247,248,5,102,0,0,248,249,5,97,0,0,249,
  	250,5,108,0,0,250,251,5,115,0,0,251,253,5,101,0,0,252,241,1,0,0,0,252,
  	246,1,0,0,0,253,48,1,0,0,0,254,255,3,89,44,0,255,256,3,71,35,0,256,257,
  	5,44,0,0,257,258,5,98,0,0,258,259,5,111,0,0,259,260,5,111,0,0,260,261,
  	5,108,0,0,261,262,1,0,0,0,262,263,3,91,45,0,263,50,1,0,0,0,264,265,3,
  	89,44,0,265,266,3,71,35,0,266,267,5,44,0,0,267,268,5,108,0,0,268,269,
  	5,111,0,0,269,270,5,103,0,0,270,271,5,105,0,0,271,272,5,99,0,0,272,273,
  	1,0,0,0,273,274,3,91,45,0,274,52,1,0,0,0,275,276,5,108,0,0,276,281,5,
  	108,0,0,277,278,5,117,0,0,278,279,5,108,0,0,279,281,5,108,0,0,280,275,
  	1,0,0,0,280,277,1,0,0,0,281,54,1,0,0,0,282,283,3,81,40,0,283,56,1,0,0,
  	0,284,285,3,89,44,0,285,286,3,71,35,0,286,287,5,44,0,0,287,288,5,110,
  	0,0,288,289,5,117,0,0,289,290,5,109,0,0,290,291,5,101,0,0,291,292,5,114,
  	0,0,292,293,5,105,0,0,293,294,5,99,0,0,294,295,1,0,0,0,295,296,3,91,45,
  	0,296,58,1,0,0,0,297,298,5,123,0,0,298,60,1,0,0,0,299,300,5,125,0,0,300,
  	62,1,0,0,0,301,302,5,91,0,0,302,64,1,0,0,0,303,304,5,93,0,0,304,66,1,
  	0,0,0,305,306,5,40,0,0,306,68,1,0,0,0,307,308,5,41,0,0,308,70,1,0,0,0,
  	309,313,3,73,36,0,310,312,3,75,37,0,311,310,1,0,0,0,312,315,1,0,0,0,313,
  	311,1,0,0,0,313,314,1,0,0,0,314,72,1,0,0,0,315,313,1,0,0,0,316,318,7,
  	0,0,0,317,316,1,0,0,0,318,74,1,0,0,0,319,321,7,1,0,0,320,319,1,0,0,0,
  	321,76,1,0,0,0,322,324,5,45,0,0,323,325,2,48,57,0,324,323,1,0,0,0,325,
  	326,1,0,0,0,326,324,1,0,0,0,326,327,1,0,0,0,327,78,1,0,0,0,328,330,2,
  	48,57,0,329,328,1,0,0,0,330,331,1,0,0,0,331,329,1,0,0,0,331,332,1,0,0,
  	0,332,80,1,0,0,0,333,335,5,45,0,0,334,333,1,0,0,0,334,335,1,0,0,0,335,
  	337,1,0,0,0,336,338,2,48,57,0,337,336,1,0,0,0,338,339,1,0,0,0,339,337,
  	1,0,0,0,339,340,1,0,0,0,340,341,1,0,0,0,341,343,5,46,0,0,342,344,2,48,
  	57,0,343,342,1,0,0,0,344,345,1,0,0,0,345,343,1,0,0,0,345,346,1,0,0,0,
  	346,358,1,0,0,0,347,349,5,45,0,0,348,347,1,0,0,0,348,349,1,0,0,0,349,
  	351,1,0,0,0,350,352,2,48,57,0,351,350,1,0,0,0,352,353,1,0,0,0,353,351,
  	1,0,0,0,353,354,1,0,0,0,354,355,1,0,0,0,355,356,5,46,0,0,356,358,5,102,
  	0,0,357,334,1,0,0,0,357,348,1,0,0,0,358,82,1,0,0,0,359,360,5,39,0,0,360,
  	362,5,98,0,0,361,363,2,48,49,0,362,361,1,0,0,0,363,364,1,0,0,0,364,362,
  	1,0,0,0,364,365,1,0,0,0,365,84,1,0,0,0,366,367,5,48,0,0,367,368,5,98,
  	0,0,368,370,1,0,0,0,369,371,2,48,49,0,370,369,1,0,0,0,371,372,1,0,0,0,
  	372,370,1,0,0,0,372,373,1,0,0,0,373,86,1,0,0,0,374,375,5,48,0,0,375,376,
  	5,120,0,0,376,378,1,0,0,0,377,379,7,2,0,0,378,377,1,0,0,0,379,380,1,0,
  	0,0,380,378,1,0,0,0,380,381,1,0,0,0,381,391,1,0,0,0,382,383,5,48,0,0,
  	383,384,5,120,0,0,384,386,1,0,0,0,385,387,7,3,0,0,386,385,1,0,0,0,387,
  	388,1,0,0,0,388,386,1,0,0,0,388,389,1,0,0,0,389,391,1,0,0,0,390,374,1,
  	0,0,0,390,382,1,0,0,0,391,88,1,0,0,0,392,393,5,171,0,0,393,90,1,0,0,0,
  	394,395,5,187,0,0,395,92,1,0,0,0,396,397,5,43,0,0,397,94,1,0,0,0,398,
  	399,5,45,0,0,399,96,1,0,0,0,400,401,5,42,0,0,401,98,1,0,0,0,402,403,5,
  	47,0,0,403,100,1,0,0,0,404,405,5,62,0,0,405,102,1,0,0,0,406,407,5,62,
  	0,0,407,408,5,61,0,0,408,104,1,0,0,0,409,410,5,60,0,0,410,106,1,0,0,0,
  	411,412,5,60,0,0,412,413,5,61,0,0,413,108,1,0,0,0,414,415,5,61,0,0,415,
  	416,5,61,0,0,416,110,1,0,0,0,417,418,5,33,0,0,418,419,5,61,0,0,419,112,
  	1,0,0,0,420,421,5,38,0,0,421,114,1,0,0,0,422,423,5,124,0,0,423,116,1,
  	0,0,0,424,425,5,94,0,0,425,118,1,0,0,0,426,427,5,126,0,0,427,120,1,0,
  	0,0,428,429,5,60,0,0,429,430,5,60,0,0,430,122,1,0,0,0,431,432,5,62,0,
  	0,432,433,5,62,0,0,433,124,1,0,0,0,434,435,5,38,0,0,435,436,5,38,0,0,
  	436,126,1,0,0,0,437,438,5,124,0,0,438,439,5,124,0,0,439,128,1,0,0,0,440,
  	441,5,33,0,0,441,130,1,0,0,0,442,443,7,4,0,0,443,444,1,0,0,0,444,445,
  	6,65,0,0,445,132,1,0,0,0,24,0,177,221,230,252,280,313,317,320,326,331,
  	334,339,345,348,353,357,364,372,378,380,386,388,390,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  spotlexerLexerStaticData = staticData.release();
}

}

spotLexer::spotLexer(CharStream *input) : Lexer(input) {
  spotLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *spotlexerLexerStaticData->atn, spotlexerLexerStaticData->decisionToDFA, spotlexerLexerStaticData->sharedContextCache);
}

spotLexer::~spotLexer() {
  delete _interpreter;
}

std::string spotLexer::getGrammarFileName() const {
  return "spot.g4";
}

const std::vector<std::string>& spotLexer::getRuleNames() const {
  return spotlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& spotLexer::getChannelNames() const {
  return spotlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& spotLexer::getModeNames() const {
  return spotlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& spotLexer::getVocabulary() const {
  return spotlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView spotLexer::getSerializedATN() const {
  return spotlexerLexerStaticData->serializedATN;
}

const atn::ATN& spotLexer::getATN() const {
  return *spotlexerLexerStaticData->atn;
}




void spotLexer::initialize() {
  ::antlr4::internal::call_once(spotlexerLexerOnceFlag, spotlexerLexerInitialize);
}
