
// Generated from spot.g4 by ANTLR 4.12.0


#include "spotLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct SpotLexerStaticData final {
  SpotLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  SpotLexerStaticData(const SpotLexerStaticData&) = delete;
  SpotLexerStaticData(SpotLexerStaticData&&) = delete;
  SpotLexerStaticData& operator=(const SpotLexerStaticData&) = delete;
  SpotLexerStaticData& operator=(SpotLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag spotlexerLexerOnceFlag;
SpotLexerStaticData *spotlexerLexerStaticData = nullptr;

void spotlexerLexerInitialize() {
  assert(spotlexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<SpotLexerStaticData>(
    std::vector<std::string>{
      "PLACEHOLDER", "DT_AND", "DT_NEXT", "DT_NEXT_AND", "DT_NCREPS", "SEP", 
      "FUNCTION", "EVENTUALLY", "ALWAYS", "NEXT", "UNTIL", "RELEASE", "DOTS", 
      "IMPL", "IMPL2", "IFF", "XOR", "BIND1", "BIND2", "SEREIMPL1", "SEREIMPL2", 
      "ASS", "DELAY", "SCOL", "COL", "FIRST_MATCH", "BOOLEAN_CONSTANT", 
      "BOOLEAN_VARIABLE", "LOGIC_CONSTANT", "LOGIC_VARIABLE", "SIGN", "CONST_SUFFIX", 
      "NUMERIC_CONSTANT", "NUMERIC_VARIABLE", "LGPAREN", "RGPAREN", "LCPAREN", 
      "RCPAREN", "LPAREN", "RPAREN", "VARIABLE", "VALID_ID_START", "VALID_ID_CHAR", 
      "NUMERIC", "VERILOG_BINARY", "GCC_BINARY", "HEX", "START_VAR", "END_VAR", 
      "PLUS", "MINUS", "TIMES", "DIV", "GT", "GE", "LT", "LE", "EQ", "NEQ", 
      "BAND", "BOR", "BXOR", "NEG", "LSHIFT", "RSHIFT", "AND", "OR", "NOT", 
      "WS"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "", "'..&&..'", "", "", "", "", "'$stable'", "'F'", "'G'", "'X'", 
      "'U'", "'R'", "'..'", "'->'", "'=>'", "'<->'", "'xor'", "'[]->'", 
      "'[]=>'", "'|->'", "'|=>'", "'='", "'##'", "';'", "':'", "'first_match'", 
      "", "", "", "", "", "", "", "", "'{'", "'}'", "'['", "']'", "'('", 
      "')'", "", "", "", "", "'+'", "'-'", "'*'", "'/'", "'>'", "'>='", 
      "'<'", "'<='", "'=='", "'!='", "'&'", "'|'", "'^'", "'~'", "'<<'", 
      "'>>'", "'&&'", "'||'", "'!'"
    },
    std::vector<std::string>{
      "", "PLACEHOLDER", "DT_AND", "DT_NEXT", "DT_NEXT_AND", "DT_NCREPS", 
      "SEP", "FUNCTION", "EVENTUALLY", "ALWAYS", "NEXT", "UNTIL", "RELEASE", 
      "DOTS", "IMPL", "IMPL2", "IFF", "XOR", "BIND1", "BIND2", "SEREIMPL1", 
      "SEREIMPL2", "ASS", "DELAY", "SCOL", "COL", "FIRST_MATCH", "BOOLEAN_CONSTANT", 
      "BOOLEAN_VARIABLE", "LOGIC_CONSTANT", "LOGIC_VARIABLE", "SIGN", "CONST_SUFFIX", 
      "NUMERIC_CONSTANT", "NUMERIC_VARIABLE", "LGPAREN", "RGPAREN", "LCPAREN", 
      "RCPAREN", "LPAREN", "RPAREN", "NUMERIC", "VERILOG_BINARY", "GCC_BINARY", 
      "HEX", "PLUS", "MINUS", "TIMES", "DIV", "GT", "GE", "LT", "LE", "EQ", 
      "NEQ", "BAND", "BOR", "BXOR", "NEG", "LSHIFT", "RSHIFT", "AND", "OR", 
      "NOT", "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,64,462,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,1,0,1,0,1,0,1,
  	1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,
  	1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
  	4,1,4,1,5,1,5,1,5,1,5,3,5,184,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,
  	1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,
  	1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,
  	1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,
  	1,20,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,25,
  	1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,
  	1,26,1,26,1,26,1,26,1,26,3,26,271,8,26,1,27,1,27,1,27,1,27,1,27,1,27,
  	1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,3,28,287,8,28,1,28,3,28,290,8,
  	28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,
  	29,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,31,1,31,3,31,315,8,31,1,32,1,
  	32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
  	33,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,
  	39,1,40,1,40,5,40,349,8,40,10,40,12,40,352,9,40,1,41,3,41,355,8,41,1,
  	42,3,42,358,8,42,1,43,3,43,361,8,43,1,43,4,43,364,8,43,11,43,12,43,365,
  	1,43,1,43,4,43,370,8,43,11,43,12,43,371,3,43,374,8,43,1,44,1,44,1,44,
  	4,44,379,8,44,11,44,12,44,380,1,45,1,45,1,45,1,45,4,45,387,8,45,11,45,
  	12,45,388,1,46,1,46,1,46,1,46,4,46,395,8,46,11,46,12,46,396,1,46,1,46,
  	1,46,1,46,4,46,403,8,46,11,46,12,46,404,3,46,407,8,46,1,47,1,47,1,48,
  	1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,54,
  	1,55,1,55,1,56,1,56,1,56,1,57,1,57,1,57,1,58,1,58,1,58,1,59,1,59,1,60,
  	1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,63,1,64,1,64,1,64,1,65,1,65,1,65,
  	1,66,1,66,1,66,1,67,1,67,1,68,1,68,1,68,1,68,0,0,69,1,1,3,2,5,3,7,4,9,
  	5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
  	35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,
  	29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,
  	81,0,83,0,85,0,87,41,89,42,91,43,93,44,95,0,97,0,99,45,101,46,103,47,
  	105,48,107,49,109,50,111,51,113,52,115,53,117,54,119,55,121,56,123,57,
  	125,58,127,59,129,60,131,61,133,62,135,63,137,64,1,0,6,2,0,115,115,117,
  	117,3,0,65,90,95,95,97,122,8,0,40,41,46,46,48,58,65,91,93,93,95,95,97,
  	123,125,125,2,0,48,57,97,102,2,0,48,57,65,70,3,0,9,10,13,13,32,32,473,
  	0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
  	0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
  	0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
  	1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
  	0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,
  	0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,
  	1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,
  	0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,
  	0,93,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,
  	107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,
  	117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,
  	127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,
  	137,1,0,0,0,1,139,1,0,0,0,3,142,1,0,0,0,5,149,1,0,0,0,7,158,1,0,0,0,9,
  	167,1,0,0,0,11,183,1,0,0,0,13,185,1,0,0,0,15,193,1,0,0,0,17,195,1,0,0,
  	0,19,197,1,0,0,0,21,199,1,0,0,0,23,201,1,0,0,0,25,203,1,0,0,0,27,206,
  	1,0,0,0,29,209,1,0,0,0,31,212,1,0,0,0,33,216,1,0,0,0,35,220,1,0,0,0,37,
  	225,1,0,0,0,39,230,1,0,0,0,41,234,1,0,0,0,43,238,1,0,0,0,45,240,1,0,0,
  	0,47,243,1,0,0,0,49,245,1,0,0,0,51,247,1,0,0,0,53,270,1,0,0,0,55,272,
  	1,0,0,0,57,289,1,0,0,0,59,291,1,0,0,0,61,307,1,0,0,0,63,314,1,0,0,0,65,
  	316,1,0,0,0,67,318,1,0,0,0,69,334,1,0,0,0,71,336,1,0,0,0,73,338,1,0,0,
  	0,75,340,1,0,0,0,77,342,1,0,0,0,79,344,1,0,0,0,81,346,1,0,0,0,83,354,
  	1,0,0,0,85,357,1,0,0,0,87,360,1,0,0,0,89,375,1,0,0,0,91,382,1,0,0,0,93,
  	406,1,0,0,0,95,408,1,0,0,0,97,410,1,0,0,0,99,412,1,0,0,0,101,414,1,0,
  	0,0,103,416,1,0,0,0,105,418,1,0,0,0,107,420,1,0,0,0,109,422,1,0,0,0,111,
  	425,1,0,0,0,113,427,1,0,0,0,115,430,1,0,0,0,117,433,1,0,0,0,119,436,1,
  	0,0,0,121,438,1,0,0,0,123,440,1,0,0,0,125,442,1,0,0,0,127,444,1,0,0,0,
  	129,447,1,0,0,0,131,450,1,0,0,0,133,453,1,0,0,0,135,456,1,0,0,0,137,458,
  	1,0,0,0,139,140,5,80,0,0,140,141,3,87,43,0,141,2,1,0,0,0,142,143,5,46,
  	0,0,143,144,5,46,0,0,144,145,5,38,0,0,145,146,5,38,0,0,146,147,5,46,0,
  	0,147,148,5,46,0,0,148,4,1,0,0,0,149,150,5,46,0,0,150,151,5,46,0,0,151,
  	152,5,35,0,0,152,153,5,35,0,0,153,154,1,0,0,0,154,155,3,87,43,0,155,156,
  	5,46,0,0,156,157,5,46,0,0,157,6,1,0,0,0,158,159,5,46,0,0,159,160,5,46,
  	0,0,160,161,5,35,0,0,161,162,1,0,0,0,162,163,3,87,43,0,163,164,5,38,0,
  	0,164,165,5,46,0,0,165,166,5,46,0,0,166,8,1,0,0,0,167,168,5,46,0,0,168,
  	169,5,46,0,0,169,170,5,91,0,0,170,171,5,45,0,0,171,172,5,62,0,0,172,173,
  	1,0,0,0,173,174,3,87,43,0,174,175,5,93,0,0,175,176,3,11,5,0,176,177,5,
  	46,0,0,177,178,5,46,0,0,178,10,1,0,0,0,179,180,5,64,0,0,180,184,5,58,
  	0,0,181,182,5,64,0,0,182,184,5,59,0,0,183,179,1,0,0,0,183,181,1,0,0,0,
  	184,12,1,0,0,0,185,186,5,36,0,0,186,187,5,115,0,0,187,188,5,116,0,0,188,
  	189,5,97,0,0,189,190,5,98,0,0,190,191,5,108,0,0,191,192,5,101,0,0,192,
  	14,1,0,0,0,193,194,5,70,0,0,194,16,1,0,0,0,195,196,5,71,0,0,196,18,1,
  	0,0,0,197,198,5,88,0,0,198,20,1,0,0,0,199,200,5,85,0,0,200,22,1,0,0,0,
  	201,202,5,82,0,0,202,24,1,0,0,0,203,204,5,46,0,0,204,205,5,46,0,0,205,
  	26,1,0,0,0,206,207,5,45,0,0,207,208,5,62,0,0,208,28,1,0,0,0,209,210,5,
  	61,0,0,210,211,5,62,0,0,211,30,1,0,0,0,212,213,5,60,0,0,213,214,5,45,
  	0,0,214,215,5,62,0,0,215,32,1,0,0,0,216,217,5,120,0,0,217,218,5,111,0,
  	0,218,219,5,114,0,0,219,34,1,0,0,0,220,221,5,91,0,0,221,222,5,93,0,0,
  	222,223,5,45,0,0,223,224,5,62,0,0,224,36,1,0,0,0,225,226,5,91,0,0,226,
  	227,5,93,0,0,227,228,5,61,0,0,228,229,5,62,0,0,229,38,1,0,0,0,230,231,
  	5,124,0,0,231,232,5,45,0,0,232,233,5,62,0,0,233,40,1,0,0,0,234,235,5,
  	124,0,0,235,236,5,61,0,0,236,237,5,62,0,0,237,42,1,0,0,0,238,239,5,61,
  	0,0,239,44,1,0,0,0,240,241,5,35,0,0,241,242,5,35,0,0,242,46,1,0,0,0,243,
  	244,5,59,0,0,244,48,1,0,0,0,245,246,5,58,0,0,246,50,1,0,0,0,247,248,5,
  	102,0,0,248,249,5,105,0,0,249,250,5,114,0,0,250,251,5,115,0,0,251,252,
  	5,116,0,0,252,253,5,95,0,0,253,254,5,109,0,0,254,255,5,97,0,0,255,256,
  	5,116,0,0,256,257,5,99,0,0,257,258,5,104,0,0,258,52,1,0,0,0,259,260,5,
  	64,0,0,260,261,5,116,0,0,261,262,5,114,0,0,262,263,5,117,0,0,263,271,
  	5,101,0,0,264,265,5,64,0,0,265,266,5,102,0,0,266,267,5,97,0,0,267,268,
  	5,108,0,0,268,269,5,115,0,0,269,271,5,101,0,0,270,259,1,0,0,0,270,264,
  	1,0,0,0,271,54,1,0,0,0,272,273,3,95,47,0,273,274,3,81,40,0,274,275,5,
  	44,0,0,275,276,5,98,0,0,276,277,5,111,0,0,277,278,5,111,0,0,278,279,5,
  	108,0,0,279,280,1,0,0,0,280,281,3,97,48,0,281,56,1,0,0,0,282,290,3,89,
  	44,0,283,290,3,91,45,0,284,286,3,87,43,0,285,287,3,63,31,0,286,285,1,
  	0,0,0,286,287,1,0,0,0,287,290,1,0,0,0,288,290,3,93,46,0,289,282,1,0,0,
  	0,289,283,1,0,0,0,289,284,1,0,0,0,289,288,1,0,0,0,290,58,1,0,0,0,291,
  	292,3,95,47,0,292,293,3,81,40,0,293,294,5,44,0,0,294,295,5,108,0,0,295,
  	296,5,111,0,0,296,297,5,103,0,0,297,298,5,105,0,0,298,299,5,99,0,0,299,
  	300,5,40,0,0,300,301,1,0,0,0,301,302,3,61,30,0,302,303,5,44,0,0,303,304,
  	3,87,43,0,304,305,5,41,0,0,305,306,3,97,48,0,306,60,1,0,0,0,307,308,7,
  	0,0,0,308,62,1,0,0,0,309,310,5,108,0,0,310,315,5,108,0,0,311,312,5,117,
  	0,0,312,313,5,108,0,0,313,315,5,108,0,0,314,309,1,0,0,0,314,311,1,0,0,
  	0,315,64,1,0,0,0,316,317,3,87,43,0,317,66,1,0,0,0,318,319,3,95,47,0,319,
  	320,3,81,40,0,320,321,5,44,0,0,321,322,5,110,0,0,322,323,5,117,0,0,323,
  	324,5,109,0,0,324,325,5,101,0,0,325,326,5,114,0,0,326,327,5,105,0,0,327,
  	328,5,99,0,0,328,329,5,40,0,0,329,330,1,0,0,0,330,331,3,87,43,0,331,332,
  	5,41,0,0,332,333,3,97,48,0,333,68,1,0,0,0,334,335,5,123,0,0,335,70,1,
  	0,0,0,336,337,5,125,0,0,337,72,1,0,0,0,338,339,5,91,0,0,339,74,1,0,0,
  	0,340,341,5,93,0,0,341,76,1,0,0,0,342,343,5,40,0,0,343,78,1,0,0,0,344,
  	345,5,41,0,0,345,80,1,0,0,0,346,350,3,83,41,0,347,349,3,85,42,0,348,347,
  	1,0,0,0,349,352,1,0,0,0,350,348,1,0,0,0,350,351,1,0,0,0,351,82,1,0,0,
  	0,352,350,1,0,0,0,353,355,7,1,0,0,354,353,1,0,0,0,355,84,1,0,0,0,356,
  	358,7,2,0,0,357,356,1,0,0,0,358,86,1,0,0,0,359,361,5,45,0,0,360,359,1,
  	0,0,0,360,361,1,0,0,0,361,363,1,0,0,0,362,364,2,48,57,0,363,362,1,0,0,
  	0,364,365,1,0,0,0,365,363,1,0,0,0,365,366,1,0,0,0,366,373,1,0,0,0,367,
  	369,5,46,0,0,368,370,2,48,57,0,369,368,1,0,0,0,370,371,1,0,0,0,371,369,
  	1,0,0,0,371,372,1,0,0,0,372,374,1,0,0,0,373,367,1,0,0,0,373,374,1,0,0,
  	0,374,88,1,0,0,0,375,376,5,39,0,0,376,378,5,98,0,0,377,379,2,48,49,0,
  	378,377,1,0,0,0,379,380,1,0,0,0,380,378,1,0,0,0,380,381,1,0,0,0,381,90,
  	1,0,0,0,382,383,5,48,0,0,383,384,5,98,0,0,384,386,1,0,0,0,385,387,2,48,
  	49,0,386,385,1,0,0,0,387,388,1,0,0,0,388,386,1,0,0,0,388,389,1,0,0,0,
  	389,92,1,0,0,0,390,391,5,48,0,0,391,392,5,120,0,0,392,394,1,0,0,0,393,
  	395,7,3,0,0,394,393,1,0,0,0,395,396,1,0,0,0,396,394,1,0,0,0,396,397,1,
  	0,0,0,397,407,1,0,0,0,398,399,5,48,0,0,399,400,5,120,0,0,400,402,1,0,
  	0,0,401,403,7,4,0,0,402,401,1,0,0,0,403,404,1,0,0,0,404,402,1,0,0,0,404,
  	405,1,0,0,0,405,407,1,0,0,0,406,390,1,0,0,0,406,398,1,0,0,0,407,94,1,
  	0,0,0,408,409,5,171,0,0,409,96,1,0,0,0,410,411,5,187,0,0,411,98,1,0,0,
  	0,412,413,5,43,0,0,413,100,1,0,0,0,414,415,5,45,0,0,415,102,1,0,0,0,416,
  	417,5,42,0,0,417,104,1,0,0,0,418,419,5,47,0,0,419,106,1,0,0,0,420,421,
  	5,62,0,0,421,108,1,0,0,0,422,423,5,62,0,0,423,424,5,61,0,0,424,110,1,
  	0,0,0,425,426,5,60,0,0,426,112,1,0,0,0,427,428,5,60,0,0,428,429,5,61,
  	0,0,429,114,1,0,0,0,430,431,5,61,0,0,431,432,5,61,0,0,432,116,1,0,0,0,
  	433,434,5,33,0,0,434,435,5,61,0,0,435,118,1,0,0,0,436,437,5,38,0,0,437,
  	120,1,0,0,0,438,439,5,124,0,0,439,122,1,0,0,0,440,441,5,94,0,0,441,124,
  	1,0,0,0,442,443,5,126,0,0,443,126,1,0,0,0,444,445,5,60,0,0,445,446,5,
  	60,0,0,446,128,1,0,0,0,447,448,5,62,0,0,448,449,5,62,0,0,449,130,1,0,
  	0,0,450,451,5,38,0,0,451,452,5,38,0,0,452,132,1,0,0,0,453,454,5,124,0,
  	0,454,455,5,124,0,0,455,134,1,0,0,0,456,457,5,33,0,0,457,136,1,0,0,0,
  	458,459,7,5,0,0,459,460,1,0,0,0,460,461,6,68,0,0,461,138,1,0,0,0,20,0,
  	183,270,286,289,314,350,354,357,360,365,371,373,380,388,394,396,402,404,
  	406,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  spotlexerLexerStaticData = staticData.release();
}

}

spotLexer::spotLexer(CharStream *input) : Lexer(input) {
  spotLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *spotlexerLexerStaticData->atn, spotlexerLexerStaticData->decisionToDFA, spotlexerLexerStaticData->sharedContextCache);
}

spotLexer::~spotLexer() {
  delete _interpreter;
}

std::string spotLexer::getGrammarFileName() const {
  return "spot.g4";
}

const std::vector<std::string>& spotLexer::getRuleNames() const {
  return spotlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& spotLexer::getChannelNames() const {
  return spotlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& spotLexer::getModeNames() const {
  return spotlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& spotLexer::getVocabulary() const {
  return spotlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView spotLexer::getSerializedATN() const {
  return spotlexerLexerStaticData->serializedATN;
}

const atn::ATN& spotLexer::getATN() const {
  return *spotlexerLexerStaticData->atn;
}




void spotLexer::initialize() {
  ::antlr4::internal::call_once(spotlexerLexerOnceFlag, spotlexerLexerInitialize);
}
